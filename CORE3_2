------------------------------------------------------------------------------------------------------
-- INPUT PARAMETERS
------------------------------------------------------------------------------------------------------
DECLARE inputPartner STRING DEFAULT 'tufts';
DECLARE inputReportPeriodStartDate DATE DEFAULT '2022-01-01';
DECLARE inputReportPeriodEndDate DATE DEFAULT '2022-12-31';

CREATE TEMP TABLE all_elements AS (
------------ ELIGIBLE MEMBERS  -----------------------------------------------------------------------

 WITH Core2_1 as (
   select distinct 
          e.patientid,
          DATE_SUB(DATE_ADD(e.eligEffectiveDate, INTERVAL 3 Month), INTERVAL 1 DAY) tuftsEnrollmentDate_90d,
          e.eligEffectiveDate tuftsEnrollmentDate,
          cor.*
   from 
      (select*,
            unnested_patientids as patientid
      FROM `cityblock-analytics.abs_member.abs_enterprise_member_elig_compliance`  
        cross join unnest (patientIds) as unnested_patientids ) e
  inner join `cityblock-analytics.abs_client_reporting.P32_Core_2_1_All_Elements_2022_20230629` cor
    on  cor.memberID = e.memberId and e.partner='tufts' and e.eligEffectiveDate is not null AND e.eligEndDate IS NOT NULL 
        and PARSE_DATE('%Y/%m/%d',cor.eligEffectiveDate) = e.eligEffectiveDate
) 

------------ Manual Extracts (table names can change)  -----------------------------------------------------
,Core3_2_manualExtract as (
   select patientid
            ,goalid
            ,PARSE_DATE('%m/%d/%Y',if(CPDiscussionDt='', NULL,CPDiscussionDt )) CPDiscussionDt
    from `cityblock-analytics.abs_client_reporting.Extract_CORE32_MemberCP_20211101_20221231_20230614` 
    where CPDiscussion = 'Y'  )

,table1_11 as (
    select patientid, GoalId
    from `cityblock-analytics.abs_client_reporting.Tufts_IA1_11_ExtractReviews_MemberInvolvedInCP` 
    where EnrolleeInvolvedInCP = 'Y'
)
------------ Adding Variables  -----------------------------------------------------------------------

---- H: MemberRefusalDateCarePlan
, stg_MemberRefusalDateCarePlan as (
  select distinct a.patientId,
          if(declinedAt is not null,declinedAt,createdAt) as timestamp_check,
          if(declinedAt is not null,DATE( DATETIME( declinedAt ,"America/New_York" ) ),  
             DATE( DATETIME( createdAt ,"America/New_York" ) )) as MemberRefusalDateCarePlan,
          cp.createdAt,
          cp.declinedat,
          cp.value,
          a.tuftsEnrollmentDate,
          a.tuftsEnrollmentDate_90d
  from Core2_1 a
  inner join `cityblock-analytics.commons.patient_attribute` cp
    on cp.patientId = a.patientid
      and cp.type='declinedActionPlan'
 )  


, stg2_MemberRefusalDateCarePlan as (
    Select distinct *,
        RANK() OVER (PARTITION BY patientid,MemberRefusalDateCarePlan ORDER BY timestamp_check desc) AS finish_rank,
        RANK() OVER (PARTITION BY patientid,MemberRefusalDateCarePlan ORDER BY createdAt desc) AS created_rank
    from stg_MemberRefusalDateCarePlan
)

,MemberRefusalDateCarePlan as (
    Select distinct patientId, MemberRefusalDateCarePlan
    from stg2_MemberRefusalDateCarePlan
    where finish_rank =1 and created_rank = 1 and value = 'true'
        and MemberRefusalDateCarePlan between tuftsEnrollmentDate and tuftsEnrollmentDate_90d
    qualify row_number() over(partition by patientid order by MemberRefusalDateCarePlan) = 1
) 

 ---- O, P, Q: Outreach Dates after assesment completed
, outreaches_all AS (
    select distinct a.patientid ,
          outr.modality,
          outr.successful,
          outr.outreachDate
    from Core2_1 a
    INNER JOIN `cityblock-analytics.abs_client_reporting.DBT_Tufts_Outreaches_Raw_v2_temp_20230626` outr
     on outr.patientid = a.patientid 
      and outr.outreachType = 'Assessment Scheduling'
      and (a.dateofCompletedAssessment is not null or a.refusalAssessment is not null)
      and outr.outreachDate > PARSE_DATE('%Y/%m/%d',coalesce(dateofCompletedAssessment, refusalAssessment) )
      and outr.outreachDate > PARSE_DATE('%Y/%m/%d',coalesce(refusalAssessment, dateofCompletedAssessment) )
      and outr.outreachDate <= tuftsEnrollmentDate_90d

) 

, outreaches_nodups AS (
  select patientid,
          modality,
          outreachDate,
          successful
  from outreaches_all
  group by patientid,
          modality,
          outreachDate,
          successful
) 

, outreaches_unsucc_assesscompl AS (
  select outr.patientid,
          modality,
          outreachDate,
          successful,
          row_number()over(partition by patientid, successful order by outreachDate, modality) rk
  from outreaches_nodups outr
  where successful=0
) 

 ---- S: dateofCompletedCarePlan
, goals as ( --386
  select distinct a.patientid,
          a.tuftsEnrollmentDate,
          a.tuftsEnrollmentDate_90d,
          goal.goalCreatedAt,
          (DATE(DATETIME(goal.goalCreatedAt,"America/New_York"))) goalCreatedDate,
          goalId,
          goal.goalLabel,
          goal.goalTitle
  from Core2_1 a
  JOIN `cityblock-analytics.mrt_commons.member_goals_tasks_all` AS goal  
        ON a.patientId = goal.patientId 
          and goal.goalCreatedAt is not null
          AND goal.isDeletedGoal = false
          AND goal.goalLabel NOT IN ('Engagement','Workflow') 
          and DATE(DATETIME(goal.goalCreatedAt,"America/New_York")) between tuftsEnrollmentDate and tuftsEnrollmentDate_90d
)

,icp as (
    select icp.patientid, DATE(DATETIME(icp.CreatedAt,"America/New_York")) CreatedAtDate
    from `cityblock-analytics.commons.action_plan_update` icp
    where icp.wasMemberInvolved = True 
)

, memberInvolved as (
  select distinct goal.patientid,
          goal.goalCreatedAt,
          goal.goalCreatedDate,
          goal.goalId,
          goal.goalLabel,
          goal.goalTitle
  from goals goal
  left join icp icp
        on goal.patientid = icp.patientid
          and CreatedAtDate >= goalCreatedDate
          and (CreatedAtDate = goalCreatedDate 
                or 
                CreatedAtDate < DATE_ADD(goalCreatedDate, INTERVAL 30 DAY) )
  left join table1_11 icp2
        on goal.GoalId = icp2.GoalId
  left join Core3_2_manualExtract icp3
        on goal.goalId = icp3.goalid and CPDiscussionDt between tuftsEnrollmentDate and tuftsEnrollmentDate_90d
  where (icp2.GoalId IS NOT NULL or icp.patientid IS NOT NULL or icp3.GoalId IS NOT NULL)
) 

, dateofCompletedCarePlan as (
  select distinct *
  from memberInvolved
  qualify row_number() over(partition by patientid order by goalCreatedAt) = 1
) 

---- provisional: All together
, allelements_prov as (
    select distinct memberID,
        firstName,
        lastName,
        dateOfBirth,
        eligEffectiveDate,
        eligEndDate,
        refusalAssessment,
        MemberRefusalDateCarePlan,
        ApptNoShowDate,
        ApptNoShowOutreachNoSuccessDate,
        ApptNoShowOutreachSuccessDate,
        MemberStatusDate,
        MemberNotInterestedDate,
        if(coalesce(dateofCompletedAssessment,refusalAssessment ) is not null,firstout.outreachDate, 
            PARSE_DATE('%Y/%m/%d',firstOutreachDate)) firstOutreachDate,
        if(coalesce(dateofCompletedAssessment,refusalAssessment ) is not null,firstout.modality, 
            firstOutreachModality) firstOutreachModality,
        if(coalesce(dateofCompletedAssessment,refusalAssessment ) is not null,secout.outreachDate, 
            PARSE_DATE('%Y/%m/%d',secondOutreachDate)) secondOutreachDate,
        if(coalesce(dateofCompletedAssessment,refusalAssessment ) is not null,secout.modality, 
            secondOutreachModality) secondOutreachModality,
        if(coalesce(dateofCompletedAssessment,refusalAssessment ) is not null,thirdout.outreachDate, 
            PARSE_DATE('%Y/%m/%d',thirdOutreachDate)) thirdOutreachDate,
        if(coalesce(dateofCompletedAssessment,refusalAssessment ) is not null,thirdout.modality, 
            thirdOutreachModality) thirdOutreachModality,
        dateofCompletedAssessment,
        goalCreatedDate dateofCompletedCarePlan,
        IncompleteHRADate,
        Appointment90plusDate,
        icp.goalid,
        icp.goalLabel,
        icp.goalTitle,
        quarter
    from Core2_1 a
    left join MemberRefusalDateCarePlan ref
      on ref.patientid = a.patientid
    left join outreaches_unsucc_assesscompl firstout
        on firstout.patientId = a.patientid and firstout.rk=1
    left join outreaches_unsucc_assesscompl secout
        on secout.patientId = a.patientid and secout.rk=2
    left join outreaches_unsucc_assesscompl thirdout
        on thirdout.patientId = a.patientid and thirdout.rk=3
    left join dateofCompletedCarePlan icp
      on icp.patientid = a.patientid
) 

----- G: Refusal

,allelements_prov_G as(
    select distinct *,
        CASE WHEN FORMAT_DATE("%Y/%m/%d",MemberRefusalDateCarePlan) IS NOT NULL THEN FORMAT_DATE("%Y/%m/%d",MemberRefusalDateCarePlan)
            WHEN MemberStatusDate is not null THEN MemberStatusDate
            WHEN MemberNotInterestedDate IS NOT NULL THEN MemberNotInterestedDate
            WHEN (ApptNoShowDate IS NOT NULL AND  ApptNoShowOutreachNoSuccessDate IS NOT NULL
                     AND ApptNoShowOutreachSuccessDate IS NULL) THEN ApptNoShowDate
            WHEN IncompleteHRADate IS NOT NULL THEN IncompleteHRADate
            WHEN Appointment90plusDate IS NOT NULL THEN Appointment90plusDate
            ELSE NULL
        END refusalCarePlan,
    from allelements_prov
) 

---- V: Element
,allelements_prov_V as(
    select distinct *,
        CASE WHEN dateofCompletedCarePlan IS NOT NULL THEN 'D'
            WHEN dateofCompletedCarePlan IS NULL AND refusalCarePlan IS NOT NULL THEN 'B'
            WHEN dateofCompletedCarePlan IS NULL AND refusalCarePlan IS NULL AND thirdOutreachDate IS NOT NULL THEN 'C'
            ELSE 'A'
        END element,
    from allelements_prov_G
)

select distinct memberID,
        firstName,
        lastName,
        dateOfBirth,
        eligEffectiveDate,
        eligEndDate,
        refusalCarePlan,
        refusalAssessment,
        FORMAT_DATE("%Y/%m/%d",MemberRefusalDateCarePlan) MemberRefusalDateCarePlan,
        ApptNoShowDate,
        ApptNoShowOutreachNoSuccessDate,
        ApptNoShowOutreachSuccessDate,
        MemberStatusDate,
        MemberNotInterestedDate,
        FORMAT_DATE("%Y/%m/%d",firstOutreachDate) firstOutreachDate,
        firstOutreachModality,
        FORMAT_DATE("%Y/%m/%d",secondOutreachDate) secondOutreachDate,
        secondOutreachModality,
        FORMAT_DATE("%Y/%m/%d",thirdOutreachDate) thirdOutreachDate,
        thirdOutreachModality,
        dateofCompletedAssessment,
        FORMAT_DATE("%Y/%m/%d",dateofCompletedCarePlan) dateofCompletedCarePlan,
        IncompleteHRADate,
        Appointment90plusDate,
        goalid,
        goalLabel,
        goalTitle,
        quarter,
        element
from allelements_prov_V );


# Output Tables

CREATE TEMP TABLE client_list AS (
    select memberID,
        firstName,
        lastName,
        dateOfBirth,
        eligEffectiveDate,
        eligEndDate,
        refusalCarePlan,
        firstOutreachDate,
        secondOutreachDate,
        thirdOutreachDate,
        dateofCompletedCarePlan,
        quarter,
        element
    from all_elements   
);

CREATE TEMP TABLE elementA AS (
    select memberID,
        firstName,
        lastName,
        dateOfBirth,
        eligEffectiveDate,
        eligEndDate,
        quarter
    from client_list   
);

CREATE TEMP TABLE elementB AS (
    select memberID,
        firstName,
        lastName,
        dateOfBirth,
        eligEffectiveDate,
        eligEndDate,
        refusalCarePlan,
        quarter
    from client_list  
    where element ='B' 
);

CREATE TEMP TABLE elementC AS (
    select memberID,
        firstName,
        lastName,
        dateOfBirth,
        eligEffectiveDate,
        eligEndDate,
        firstOutreachDate,
        secondOutreachDate,
        thirdOutreachDate,
        quarter
    from client_list
    where element ='C'    
);

CREATE TEMP TABLE elementD AS (
    select memberID,
        firstName,
        lastName,
        dateOfBirth,
        eligEffectiveDate,
        eligEndDate,
        dateofCompletedCarePlan,
        quarter
    from client_list   
    where element ='D' 
);
---------------------------------------------------------------------------------------
-- OUTPUT
---------------------------------------------------------------------------------------
select * from all_elements;
select * from client_list;
select * from elementA;
select * from elementB;
select * from elementC;
select * from elementD;

---------------------------------------------------------------------------------------
-- Quality Checks
---------------------------------------------------------------------------------------
select
    (select count(memberid) from all_elements) Q1members,
    (select count(distinct memberid) from all_elements) Q1distinctmembers,
    (select count(memberid) 
    from all_elements
    where PARSE_DATE('%Y/%m/%d', eligEndDate) >= inputReportPeriodEndDate) Q2EndDateAfterorOnPeriodEnd,
    (select count(memberid) 
     from all_elements
     where PARSE_DATE('%Y/%m/%d',eligEndDate)>= DATE_SUB(DATE_ADD(
         PARSE_DATE('%Y/%m/%d',eligEffectiveDate), INTERVAL 3 Month), INTERVAL 1 DAY) 
     ) Q3EndDateAfter90thDay,
    (select distinct element from all_elements
    where dateofCompletedCarePlan is not null) Q4distinctelemnt,
    (select count(memberID) from all_elements
    where dateofCompletedCarePlan is not null and element<>'D') Q4,
    (select count(memberID) from all_elements
    where dateofCompletedCarePlan is not null) Q5allmemberswithAssesment,
    (select count(memberID) from all_elements
    where PARSE_DATE('%Y/%m/%d',dateofCompletedCarePlan) between PARSE_DATE('%Y/%m/%d',eligEffectiveDate) and DATE_SUB(DATE_ADD(
         PARSE_DATE('%Y/%m/%d',eligEffectiveDate), INTERVAL 3 Month), INTERVAL 1 DAY) ) Q5,
    (select count(memberID) from all_elements where firstOutreachDate is not null ) allmembers_FirstOutreach,
    (select count(memberID) from all_elements where 
        firstOutreachDate is not null and
        (firstOutreachDate<= secondOutreachDate or secondOutreachDate is null) 
            AND (firstOutreachDate<= thirdOutreachDate or thirdOutreachDate is null)) Q6,
    (select count(memberID) from all_elements where secondOutreachDate is not null ) allmembers_SecondOutreach,
    (select count(memberID) from all_elements where 
        secondOutreachDate is not null and
        (secondOutreachDate<= thirdOutreachDate or thirdOutreachDate is null) ) Q7,
    (select count(memberID) from all_elements where 
        firstOutreachDate is not null and
        PARSE_DATE( '%Y/%m/%d',firstOutreachDate) between PARSE_DATE('%Y/%m/%d',eligEffectiveDate) and DATE_SUB(DATE_ADD(
         PARSE_DATE('%Y/%m/%d',eligEffectiveDate), INTERVAL 3 Month), INTERVAL 1 DAY)) Q8,
    (select count(memberID) from all_elements where 
        secondOutreachDate is not null and
        PARSE_DATE('%Y/%m/%d',secondOutreachDate) between PARSE_DATE('%Y/%m/%d',eligEffectiveDate) and DATE_SUB(DATE_ADD(
         PARSE_DATE('%Y/%m/%d',eligEffectiveDate), INTERVAL 3 Month), INTERVAL 1 DAY) ) Q9,
    (select count(memberID) from all_elements where thirdOutreachDate is not null ) allmembers_ThirdOutreach,
    (select count(memberID) from all_elements where 
         thirdOutreachDate is not null and
        PARSE_DATE('%Y/%m/%d',thirdOutreachDate) between PARSE_DATE('%Y/%m/%d',eligEffectiveDate) and DATE_SUB(DATE_ADD(
         PARSE_DATE('%Y/%m/%d',eligEffectiveDate), INTERVAL 3 Month), INTERVAL 1 DAY) ) Q10,
    (select count(memberID) from all_elements where refusalCarePlan is not null ) allmembers_RefusalAssesment,    
    (select count(memberID) from all_elements where 
         refusalCarePlan is not null and
        PARSE_DATE('%Y/%m/%d',refusalCarePlan) between PARSE_DATE('%Y/%m/%d',eligEffectiveDate) and DATE_SUB(DATE_ADD(
         PARSE_DATE('%Y/%m/%d',eligEffectiveDate), INTERVAL 3 Month), INTERVAL 1 DAY) ) Q11,
    (select count(memberID) from elementA ) Q12ElementA,
    (select count(memberID) from all_elements where element='B') allmembers_elementB,
    (select count(memberID) from elementB ) Q13ElementB,
    (select count(memberID) from all_elements where element='C') allmembers_elementC,
    (select count(memberID) from elementC ) Q14ElementC,
    (select count(memberID) from all_elements where element='D') allmembers_elementD,
    (select count(memberID) from elementD ) Q15ElementD
